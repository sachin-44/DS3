#include <stdio.h>
#include <stdlib.h>

// Structure to represent a stack node
struct StackNode {
    int data;
    struct StackNode* next;
};

// Function to create a new stack node
struct StackNode* createNode(int data) {
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to check if the stack is empty
int isEmpty(struct StackNode* root) {
    return (root == NULL);
}

// Function to push a new element onto the stack
void push(struct StackNode** root, int data) {
    struct StackNode* newNode = createNode(data);
    newNode->next = *root;
    *root = newNode;
}

// Function to pop an element from the stack
int pop(struct StackNode** root) {
    if (isEmpty(*root)) {
        printf("Stack underflow\n");
        return -1; // indicating an error
    }
    struct StackNode* temp = *root;
    *root = (*root)->next;
    int popped = temp->data;
    free(temp);
    return popped;
}

// Function to find the average of the elements in the stack
float findAverage(struct StackNode* root) {
    if (isEmpty(root)) {
        printf("Stack is empty\n");
        return -1.0; // indicating an error
    }

    int sum = 0;
    int count = 0;
    struct StackNode* current = root;

    // Traverse the stack and calculate sum and count
    while (current != NULL) {
        sum += current->data;
        count++;
        current = current->next;
    }

    return (float)sum / count;
}

// Main function to demonstrate the program
int main() {
    struct StackNode* stack = NULL;

    // Push elements onto the stack
    push(&stack, 3);
    push(&stack, 5);
    push(&stack, 2);
    push(&stack, 1);
    push(&stack, 4);

    // Find and print the average of the stack elements
    float average = findAverage(stack);
    if (average != -1.0) {
        printf("The average of the stack is: %.2f\n", average);
    }

    // Clean up memory
    while (!isEmpty(stack)) {
        pop(&stack);
    }

    return 0;
}
