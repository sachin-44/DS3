#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100 // Maximum size of the stack

// Global variables
int stack_arr[MAX_SIZE];
int top = 0; // Index of the top element in the stack_arr

// Function to check if the stack is empty
int isEmpty() {
    return (top == 0);
}

// Function to check if the stack is full
int isFull() {
    return (top == MAX_SIZE);
}

// Function to push an element onto the stack
void push(int data) {
    if (isFull()) {
        printf("Stack overflow\n");
        return;
    }
    stack_arr[top++] = data;
}

// Function to pop an element from the stack
int pop() {
    if (isEmpty()) {
        printf("Stack underflow\n");
        return -1; // indicating an error
    }
    return stack_arr[--top];
}

// Function to search for an element in the stack
int search(int element) {
    for (int i = 0; i < top; ++i) {
        if (stack_arr[i] == element) {
            return i; // element found at index i
        }
    }
    return -1; // element not found
}

// Function to display the elements of the stack
void display() {
    if (isEmpty()) {
        printf("Stack is empty\n");
        return;
    }
    printf("Stack elements: ");
    for (int i = 0; i < top; ++i) {
        printf("%d ", stack_arr[i]);
    }
    printf("\n");
}

// Main function to demonstrate the program
int main() {
    // Push elements onto the stack
    push(3);
    push(5);
    push(2);
    push(1);
    push(4);

    // Display the stack
    display();

    // Search for elements in the stack
    int elementToSearch = 2;
    int result = search(elementToSearch);
    if (result != -1) {
        printf("Element %d found at index %d\n", elementToSearch, result);
    } else {
        printf("Element %d not found in the stack\n", elementToSearch);
    }

    elementToSearch = 6;
    result = search(elementToSearch);
    if (result != -1) {
        printf("Element %d found at index %d\n", elementToSearch, result);
    } else {
        printf("Element %d not found in the stack\n", elementToSearch);
    }

    return 0;
}
